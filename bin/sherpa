#!/usr/bin/env ruby
require 'optparse'
require 'methadone'
require 'csv'
require 'json'
require 'pp'
require 'lll'
require_relative '../lib/sherpa'
require_relative '../lib/progress'

include Methadone::Main

ENV['DEBUG'] = 'true'

main do |file_name|
  file_name_without_extension = file_name[0...file_name.rindex('.')]
  extension = file_name[file_name.rindex('.')..-1]
  output_file_name = file_name_without_extension + '.json'
  unparsed_file_name = file_name_without_extension + '.unparsed.txt'

  File.open output_file_name, 'w' do |output_file|
    File.open unparsed_file_name, 'w' do |error_file|
      @using_real_file = file_name !~ /short/
      line_count = @using_real_file ? 100 : 429830
      Progress.init true, line_count
      @counts = Hash.new(0)
      @citations = []

      need_to_skip_header = true
      File.foreach file_name do |line|
        if need_to_skip_header
          need_to_skip_header = false
          next
        end

        begin
          row = get_line line
          break unless row
          Progress.tally
          @counts[:valid_csv] += 1
        rescue
          @counts[:invalid_csv] += 1
          next
        end

        citation = get_citation_from_row row
        unless citation
          @counts[:no_citation] += 1
          next
        end

        begin
          citation = parse_citation citation
          @citations << citation
          @counts[:parsed] += 1
        rescue Citrus::ParseError
          error_file.puts citation
          @counts[:unparsed] += 1
        end

        show_progress unless options[:quiet]
      end

      write_results output_file

      show_results unless options[:quiet]

    end
  end
end

def get_line line
  CSV.parse_line line, col_sep: "\t"
end

def get_citation_from_row row
  row[12]
end

def parse_citation citation
  Sherpa.parse citation
end

def write_results file
  file.puts '['
  outputting_first_citation = true
  for citation in @citations
    if outputting_first_citation
      outputting_first_citation = false
    else
      file.puts ','
    end
    write_citation file, citation
  end
  file.print "\n]"
end

def write_citation file, citation
  file.print citation.to_json
end

def show_progress
  return if Progress.processed_count % 1000 != 0
  message = "#{Progress.processed_count} lines, " +
            "#{Progress.percent(@counts[:parsed])} parsed, " +
            "#{Progress.time_left}"
  Progress.puts message
end

def show_results
  Progress.show_results
  Progress.show_count @counts[:valid_csv], Progress.processed_count, 'valid CSV'
  Progress.show_count @counts[:invalid_csv], Progress.processed_count, 'invalid CSV'
  Progress.show_count @counts[:no_citation], Progress.processed_count, 'no citation'
  Progress.show_count @counts[:parsed], Progress.processed_count, 'parsed'
  Progress.show_count @counts[:unparsed], Progress.processed_count, 'unparsed'
  Progress.puts Progress.percent(@counts[:parsed], @counts[:valid_csv]) + ' success'
end

on '--quiet', "Don't display progress messages or results"

description "SHERborn PArser - Parses the citation field of Sherborn's Index Animalium"
arg :file_name

version Sherpa::VERSION

go!
