#!/usr/bin/env ruby
require 'optparse'
require 'methadone'
require 'csv'
require 'json'
require 'lll'
require_relative '../lib/sherpa'
require_relative '../lib/progress'

include Methadone::Main

ENV['DEBUG'] = 'true'

main do |file_name|
  Progress.init true
  @counts = Hash.new(0)
  @citations = []

  need_to_skip_header = true
  File.foreach file_name do |line|
    if need_to_skip_header
      need_to_skip_header = false
      next
    end

    begin
      row = CSV.parse_line line, col_sep: "\t"
      if row
        Progress.tally
      else
        break unless row
      end
      @counts[:valid_csv] += 1
    rescue
      @counts[:invalid_csv] += 1
      next
    end

    citation = row[12]
    unless citation
      @counts[:no_citation] += 1
      next
    end

    begin
      citation = Sherpa.parse(citation)
      @citations << citation
      #show_citation citation
      @counts[:parsed] += 1
    rescue Citrus::ParseError
      @counts[:unparsed] += 1
    end

    show_progress unless options[:quiet]

  end

  unless options[:quiet]
    Progress.show_results
    Progress.show_count @counts[:valid_csv], Progress.processed_count, 'valid CSV'
    Progress.show_count @counts[:invalid_csv], Progress.processed_count, 'invalid CSV'
    Progress.show_count @counts[:no_citation], Progress.processed_count, 'no citation'
    Progress.show_count @counts[:parsed], Progress.processed_count, 'parsed'
    Progress.show_count @counts[:unparsed], Progress.processed_count, 'unparsed'
    Progress.puts Progress.percent(@counts[:parsed], @counts[:valid_csv]) + ' success'
  end
end

def show_progress
  message = Progress.percent(@counts[:valid_csv]) + ' valid, ' +
            Progress.percent(@counts[:invalid_csv]) + ' invalid, ' +
            Progress.percent(@counts[:no_citation]) + ' no citation, ' +
            Progress.percent(@counts[:parsed]) + ' parsed, ' +
            Progress.percent(@counts[:unparsed]) + ' unparsed'
  Progress.puts message
end

def show_citations
  for citation in @citations
    show_citation citation
  end
end

def show_citation citation
  puts citation[:text]
  fields = []
  fields << %{title:"#{citation[:title]}"}
  fields << %{series_volume_issue:"#{citation[:series_volume_issue]}"}
  fields << %{year:"#{citation[:year]}"}
  fields << %{pages:"#{citation[:pages]}"}
  puts '  ' + fields.join(' ')
end

on '--quiet', "Don't display progress messages or results"

description "SHERborn PArser - Parses the citation field of Sherborn's Index Animalium"
arg :file_name

version Sherpa::VERSION

go!
