#!/usr/bin/env ruby
require 'optparse'
require 'methadone'
require 'csv'
require 'json'
require 'pp'
require 'lll'

require_relative '../lib/sherpa'
require_relative '../lib/sherpa/version'
require_relative '../lib/progress'

include Methadone::Main

ENV['DEBUG'] = 'true'

main do |file_name|

  @counts = Hash.new(0)
  @citations = []

  Progress.init true, get_line_count(file_name)
  output_file_name, unparsed_file_name, comparison_file_name = make_file_names file_name

  f = File.open comparison_file_name, 'w'
  f.close

  File.open output_file_name, 'w' do |output_file|
    File.open unparsed_file_name, 'w' do |error_file|

      need_to_skip_header = true
      File.foreach file_name do |line|
        if need_to_skip_header
          need_to_skip_header = false
          next
        end

        begin
          row = get_csv_row line
          break unless row
          Progress.tally
          @counts[:valid_csv] += 1
        rescue
          @counts[:invalid_csv] += 1
          next
        end

        unless citation = get_fields_from_row(row)
          @counts[:no_citation] += 1
          next
        end

        begin
          parse_citation citation
          @citations << citation
          @counts[:parsed] += 1
        rescue Citrus::ParseError
          error_file.puts citation
          @counts[:unparsed] += 1
        end

        compare_us_and_them citation

        show_progress unless options[:quiet]
      end

      write_results output_file

      show_results unless options[:quiet]

    end
  end
end

def get_line_count file_name
  return 424285 if file_name =~ /names\.txt$/
  `wc '#{file_name}' | cut -c -9`.to_i
end

def make_file_names file_name
  file_name_without_extension = file_name[0...file_name.rindex('.')]
  return file_name_without_extension + '.json', file_name_without_extension + '.unparsed.txt', file_name_without_extension + '.comparison.html'
end

def get_csv_row line
  CSV.parse_line line, col_sep: "\t"
end

def letter_to_number letter
  letter.ord - 'A'.ord
end

def get_fields_from_row row
  citation = row[letter_to_number('M')]
  return unless citation
  {citation: citation,
   them: {
    title: row[letter_to_number('P')],
    volume: row[letter_to_number('Q')],
    number: row[letter_to_number('R')],
    date: row[letter_to_number('S')],
    pages: row[letter_to_number('T')],
  }}
end

def parse_citation citation
  citation.merge! Sherpa.parse citation[:citation]
end

def compare_us_and_them citation
  citation.merge! Sherpa.compare_us_and_them citation
end

def write_results file
  file.write @citations.to_json
end

def write_citation file, citation
  file.print citation.to_json
end

def show_progress
  return if Progress.processed_count % 1000 != 0
  message = "#{Progress.processed_count} lines, " +
            "#{Progress.percent(@counts[:parsed])} parsed, " +
            "#{Progress.time_left}"
  Progress.puts message
end

def show_results
  Progress.show_results
  Progress.show_count @counts[:valid_csv], Progress.processed_count, 'valid CSV'
  Progress.show_count @counts[:invalid_csv], Progress.processed_count, 'invalid CSV'
  Progress.show_count @counts[:no_citation], Progress.processed_count, 'no citation'
  Progress.show_count @counts[:parsed], Progress.processed_count, 'parsed'
  Progress.show_count @counts[:unparsed], Progress.processed_count, 'unparsed'
  Progress.puts Progress.percent(@counts[:parsed], @counts[:valid_csv]) + ' success'
end

on '--quiet', "Don't display progress messages or results"

description "SHERborn PArser - Parses the citation field of Sherborn's Index Animalium"
arg :file_name

version Sherpa::VERSION

go!
