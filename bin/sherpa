#!/usr/bin/env ruby
require 'methadone'
require 'csv'
require 'json'
require 'lll'

require_relative '../lib/sherpa'

include Methadone::Main

ENV['DEBUG'] = 'true'

main do |file_name|
  @file_name = file_name
  @counts = Hash.new(0)
  @parsed_citations = []
  @unparsed_citations = []

  Progress.init true, line_count

  need_to_skip_header = true
  File.foreach @file_name do |line|
    if need_to_skip_header
      need_to_skip_header = false
      next
    end

    begin
      row = get_csv_row line
      break unless row
      Progress.tally
      @counts[:valid_csv] += 1
    rescue
      @counts[:invalid_csv] += 1
      next
    end

    unless citation = get_fields_from_row(row)
      @counts[:no_citation] += 1
      next
    end

    begin
      citation = parse_citation citation
      @parsed_citations << citation unless file_is_really_big
      @counts[:parsed] += 1
      @counts[:parsed_with_unparsed_part] += 1 if citation[:citations].first[:unparsed]
    rescue Citrus::ParseError
      @unparsed_citations << citation
      @counts[:unparsed] += 1
    end

    show_progress
  end

  show_results

  write_unparsed_citations

end

def file_is_really_big
  line_count > 2000
end

def line_count
  @line_count ||= `wc '#{@file_name}' | cut -c -9`.to_i
end

def make_file_name new_extension
  file_name_without_extension = @file_name[0...@file_name.rindex('.')]
  file_name_without_extension + '.' + new_extension
end

def get_csv_row line
  CSV.parse_line line, col_sep: "\t"
end

def spreadsheet_column_to_offset letter
  letter.ord - 'A'.ord
end

def get_fields_from_row row
  citation = row[spreadsheet_column_to_offset('M')]
  return unless citation
  {citation: citation}
end

def parse_citation citation
  citation.merge! Sherpa::Parser.parse citation[:citation]
end

def write_parsed_citations
  File.open make_file_name('parsed.json'), 'w' do |file|
    file.puts '['
    for citation in @parsed_citations
      file.puts citation.to_json
    end
    file.puts ']'
  end
end

def write_unparsed_citations
  File.open make_file_name('unparsed.txt'), 'w' do |file|
    strings = @unparsed_citations.map{|e| e[:citation]}.uniq.sort
    for string in strings
      file.puts string
    end
  end
end

def sort_by_frequency strings
  prefix_length = 10
  strings.sort_by do |a|
    this_prefix = a[0, prefix_length]
    group_size = 0
    for citation in @unparsed_citations
      group_size += 1 if citation[:citation][0, prefix_length] == this_prefix
    end
    - group_size
  end
end

def show_progress
  return unless line_count >= 2000
  return if Progress.processed_count % 10_000 != 0
  message = "#{Progress.processed_count} lines, " +
            "#{Progress.percent(@counts[:parsed])} parsed, " +
            "#{Progress.time_left}"
  Progress.puts message
end

def show_results
  Progress.show_results
  Progress.puts "#{@counts[:parsed]} parsed (#{@counts[:parsed_with_unparsed_part]} with unparsed part), #{@counts[:unparsed]} unparsed"
  Progress.puts "#{Progress.percent(@counts[:parsed])} (#{Progress.percent(@counts[:parsed_with_unparsed_part], @counts[:parsed])})"
end

description "SHERborn PArser - Parses the citation field of Sherborn's Index Animalium"
arg :file_name

version Sherpa::VERSION

go!
