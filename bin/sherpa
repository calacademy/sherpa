#!/usr/bin/env ruby
require 'methadone'
require 'csv'
require 'json'
require 'lll'

require_relative '../lib/sherpa'

include Methadone::Main

ENV['DEBUG'] = 'true'

main do |file_name|
  @file_name = file_name
  @counts = Hash.new(0)
  @parsed_citations = []
  @unparsed_citations = []

  Progress.init true, get_line_count

  need_to_skip_header = true
  File.foreach @file_name do |line|
    if need_to_skip_header
      need_to_skip_header = false
      next
    end

    begin
      row = get_csv_row line
      break unless row
      Progress.tally
      @counts[:valid_csv] += 1
    rescue
      @counts[:invalid_csv] += 1
      next
    end

    unless citation = get_fields_from_row(row)
      @counts[:no_citation] += 1
      next
    end

    begin
      @parsed_citations << parse_citation(citation)
      @counts[:parsed] += 1
    rescue Citrus::ParseError
      @unparsed_citations << citation
      @counts[:unparsed] += 1
    end

    compare_us_and_them citation

    show_progress unless options[:quiet]
  end

  write_citations @parsed_citations, 'parsed.json'
  write_citations @unparsed_citations, 'unparsed.json'
  write_comparisons

  show_results unless options[:quiet]

end

def get_line_count
  return 424285 if @file_name =~ /names\.txt$/
  `wc '#{@file_name}' | cut -c -9`.to_i
end

def make_file_name new_extension
  file_name_without_extension = @file_name[0...@file_name.rindex('.')]
  file_name_without_extension + '.' + new_extension
end

def get_csv_row line
  CSV.parse_line line, col_sep: "\t"
end

def letter_to_number letter
  letter.ord - 'A'.ord
end

def get_fields_from_row row
  citation = row[letter_to_number('M')]
  return unless citation
  {citation: citation,
   them: {
    title: row[letter_to_number('P')],
    volume: row[letter_to_number('Q')],
    number: row[letter_to_number('R')],
    date: row[letter_to_number('S')],
    pages: row[letter_to_number('T')],
  }}
end

def parse_citation citation
  citation.merge! Sherpa.parse citation[:citation]
end

def compare_us_and_them citation
  citation.merge! Sherpa.compare_us_and_them citation
end

def write_citations citations, extension
  File.open make_file_name(extension), 'w' do |file|
    file.puts '['
    for citation in citations
      file.puts citation.to_json
    end
    file.puts ']'
  end
end

def write_comparisons
  File.open make_file_name('comparison.html'), 'w' do |file|
    file.write Sherpa.format_comparisons @parsed_citations
  end
end

def show_progress
  return if Progress.processed_count % 1000 != 0
  message = "#{Progress.processed_count} lines, " +
            "#{Progress.percent(@counts[:parsed])} parsed, " +
            "#{Progress.time_left}"
  Progress.puts message
end

def show_results
  Progress.show_results
  Progress.show_count @counts[:valid_csv], Progress.processed_count, 'valid CSV'
  Progress.show_count @counts[:invalid_csv], Progress.processed_count, 'invalid CSV'
  Progress.show_count @counts[:no_citation], Progress.processed_count, 'no citation'
  Progress.show_count @counts[:parsed], Progress.processed_count, 'parsed'
  Progress.show_count @counts[:unparsed], Progress.processed_count, 'unparsed'
  Progress.puts Progress.percent(@counts[:parsed], @counts[:valid_csv]) + ' success'
end

on '--quiet', "Don't display progress messages or results"

description "SHERborn PArser - Parses the citation field of Sherborn's Index Animalium"
arg :file_name

version Sherpa::VERSION

go!
